module multiplier_cla_tb;

  parameter n = 20;
  reg [3:0] x;
  reg [n:0] y;
  wire [n+3:0] res;
  
  multiplier_cla #(n) mult_cla (
    .x(x),
    .y(y),
    .res(res)
  );
  
  task random_test;
    integer i;
    reg [3:0] x_rand;
    reg [n:0] y_rand;
    reg [n+3:0] expected_res;
    begin
      for (i = 0; i < n*100; i = i + 1) begin
        x_rand = $random;
        y_rand = $random;
        y = y_rand;
        x = x_rand;
        expected_res = x_rand * y_rand;
        #(n*74)//check cla for delay calculation
        if (res !== expected_res) begin
          $display("Carry look ahead Multiplier: Test failed for x = %b, y = %b, expected = %b, got = %b", x_rand, y_rand, expected_res, res);
          return;
        end
      end
      $display("Carry look ahead Multiplier: All random tests passed!");
    end
  endtask

  initial begin
    random_test();
  end

endmodule


module faulty_multiplier_cla_tb;

  parameter n = 20;
  reg [3:0] x;
  reg [n:0] y;
  wire [n+3:0] res;
  
  faulty_multiplier_cla #(n) f_mult_cla (
    .x(x),
    .y(y),
    .res(res)
  );
  
  task random_test;
    integer i;
    reg [3:0] x_rand;
    reg [n:0] y_rand;
    reg [n+3:0] expected_res;
    begin
      for (i = 0; i < n*100; i = i + 1) begin
        x_rand = $random;
        y_rand = $random;
        y = y_rand;
        x = x_rand;
        expected_res = x_rand * y_rand;
        #(n*74)//check cla for delay calculation
        if (res !== expected_res) begin
          $display("Faulty Carry look ahead Multiplier: Test failed for x = %b, y = %b, expected = %b, got = %b", x_rand, y_rand, expected_res, res);
          return;
        end
      end
      $display("Carry look ahead Multiplier: All random tests passed!");
    end
  endtask

  initial begin
    random_test();
  end

endmodule

module multiplier_fa_tb;

  parameter n = 20;
  reg [3:0] x;
  reg [n:0] y;
  wire [n+3:0] res;
  
  multiplier_fa #(n) mult_fa (
    .x(x),
    .y(y),
    .res(res)
  );
  
  task random_test;
    integer i;
    reg [3:0] x_rand;
    reg [n:0] y_rand;
    reg [n+3:0] expected_res;
    begin
      for (i = 0; i < n*100; i = i + 1) begin
        x_rand = $random;
        y_rand = $random;
        y = y_rand;
        x = x_rand;
        expected_res = x_rand * y_rand;
        #(n*92)//n*(23+4)
        if (res !== expected_res) begin
          $display("Full Adder Multiplier: Test failed for x = %b, y = %b, expected = %b, got = %b", x_rand, y_rand, expected_res, res);
          return;
        end
      end
      $display("Full Adder Multiplier: All random tests passed!");
    end
  endtask

  initial begin
    random_test();
    $stop;
  end

endmodule


module faulty_multiplier_fa_tb;

  parameter n = 20;
  reg [3:0] x;
  reg [n:0] y;
  wire [n+3:0] res;
  
  faulty_multiplier_fa #(n) f_mult_fa (
    .x(x),
    .y(y),
    .res(res)
  );
  
  task random_test;
    integer i;
    reg [3:0] x_rand;
    reg [n:0] y_rand;
    reg [n+3:0] expected_res;
    begin
      for (i = 0; i < n*100; i = i + 1) begin
        x_rand = $random;
        y_rand = $random;
        y = y_rand;
        x = x_rand;
        expected_res = x_rand * y_rand;
        #(n*92)//n*(23+4)
        if (res !== expected_res) begin
          $display("Faulty  Full Adder Multiplier: Test failed for x = %b, y = %b, expected = %b, got = %b", x_rand, y_rand, expected_res, res);
          return;
        end
      end
      $display("Full Adder Multiplier: All random tests passed!");
    end
  endtask

  initial begin
    random_test();
  end

endmodule

// module tb_cla_four_bit;
//   reg [3:0] a, b;
//   reg cin;
//   wire [3:0] sum;
//   wire cout;

//   cla_four_bit clafb (
//     .a(a), 
//     .b(b), 
//     .cin(cin), 
//     .sum(sum), 
//     .cout(cout)
//   );

//   initial begin
//     a = 4'b0101;
//     b = 4'b0011;
//     cin = 1'b0;

//     #74;
//     $write("1 clafb: a = %b, b = %b, cin = %b, sum = %b, cout = %b\n", a, b, cin, sum, cout);

//     a = 4'b1100;
//     b = 4'b1010;
//     cin = 1'b1;

//     #74;
//     $write("2 clafb: a = %b, b = %b, cin = %b, sum = %b, cout = %b\n", a, b, cin, sum, cout);

// //     $finish;
//   end

// endmodule


// module tb_four_bit_adder;
//   reg [3:0] a, b;
//   reg cin;
//   wire [3:0] sum;
//   wire cout;

//   four_bit_adder fba (
//     .a(a), 
//     .b(b), 
//     .cin(cin), 
//     .sum(sum), 
//     .cout(cout)
//   );

//   initial begin
//     a = 4'b0101;
//     b = 4'b0011;
//     cin = 1'b0;

//     #92;
//     $write("1 fba: a = %b, b = %b, cin = %b, sum = %b, cout = %b\n", a, b, cin, sum, cout);

//     a = 4'b1100;
//     b = 4'b1010;
//     cin = 1'b1;

//     #92;
//     $write("2 fba: a = %b, b = %b, cin = %b, sum = %b, cout = %b\n", a, b, cin, sum, cout);

// //     $finish;
//   end

// endmodule


// module full_adder_tb;//functional
//   reg a, b, cin;
//   wire sum, cout;

//   full_adder fa(
//     .a(a), 
//     .b(b), 
//     .cin(cin), 
//     .sum(sum), 
//     .cout(cout)
//   );
//   initial begin
// //     $dumpfile("dump.vcd"); $dumpvars;
//     a = 0;
//     b = 0;
//     cin = 0;
    
//     #5;
//     a = 1;
//     b = 1;
//     cin = 1;
    
//     #28;
//     $finish;
//   end

//   always @(sum or cout)
//     $display("sum = %b, cout = %b", sum, cout);

// endmodule
